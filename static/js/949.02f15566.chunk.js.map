{"version":3,"file":"static/js/949.02f15566.chunk.js","mappings":"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","sources":["components/HomePage/HomePage.styled.jsx","components/PaginatedItems/PaginatedItems.jsx","components/HomePage/HomePage.jsx","services/publicationsApi.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  display:flex;\n  flex-wrap:wrap;\n  justify-content:space-between;\n  & > li{\n    width: 250px;\n  }\n`;\n\n","import { useState, useEffect } from 'react';\n\nfunction PaginatedItems({ totalPages, setCurrentPage }) {\n  // We start with an empty list of items.\n\n  const [prevPage, setPrevPage] = useState(0);\n  const numberOfPages = [];\n  for (let i = 1; i <= totalPages; i++) {\n    numberOfPages.push(i);\n  }\n\n  useEffect(() => {\n    if (prevPage === 0) {\n      return;\n    }\n    //console.log(prevPage);\n    prevPage.style.border = '1px solid black';\n  }, [prevPage]);\n\n  let sliceStartArray = [];\n  let sliceEndArray = [];\n  let sumArray = [];\n  if (numberOfPages.length > 5) {\n    sliceStartArray = numberOfPages.slice(0, 5);\n  }\n  if (numberOfPages.length > 10) {\n    sliceEndArray = numberOfPages.slice(-5);\n  }\n\n  sumArray = sliceStartArray.concat('...', sliceEndArray);\n\n  console.log(sliceEndArray);\n  const handlePageChange = e => {\n    let target = e.target;\n    setPrevPage(target);\n    if (prevPage === 0) {\n      return;\n    } else {\n      prevPage.style.border = 'none';\n    }\n\n    setCurrentPage(Number(e.target.value));\n  };\n  return (\n    <>\n      <ul style={{ display: 'flex', justifyContent: 'center' }}>\n        {sumArray.map((page, index) => (\n          <li key={index}>\n            <button\n              style={{ border: 'none' }}\n              onClick={handlePageChange}\n              type=\"button\"\n              value={page}\n            >\n              {page}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport default PaginatedItems;\n","import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getTrending } from 'services/publicationsApi.js';\nimport { List } from './HomePage.styled';\nimport PaginatedItems from 'components/PaginatedItems';\n\nexport default function HomePage() {\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  let [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const getMovies = async currentPage => {\n      try {\n        const { results, total_pages } = await getTrending(currentPage);\n        if (total_pages === 0) {\n          alert('Nothing found');\n          return;\n        }\n        setTotalPages(total_pages);\n        const films = results.map(({ id, original_title, backdrop_path }) => {\n          return { id, original_title, backdrop_path };\n        });\n\n        setMovies(films);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMovies(currentPage);\n  }, [currentPage]);\n\n  return (\n    <>\n      <List>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link\n                style={{ display: 'block', margin: '1rem 0' }}\n                to={`/movies/${movie.id}`}\n                key={movie.id}\n              >\n                {movie.backdrop_path && (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}\n                    alt={`${movie.original_title}`}\n                    width=\"250\"\n                  />\n                )}\n                {movie.original_title}\n              </Link>\n            </li>\n          );\n        })}\n      </List>\n      <PaginatedItems\n        totalPages={totalPages}\n        setCurrentPage={setCurrentPage}\n        currentPage={currentPage}\n      />\n    </>\n  );\n}\n","import axios from 'axios';\nconst key = '051044c279aad319532da903b2292510';\n\nexport const getTrending = async page => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${key}&page=${\n    page + 1\n  }`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  console.log(response);\n  return response.data;\n};\nexport const getSearch = async query => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/search/movie?api_key=${key}&query=${query}&page=1&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getMovieDetails = async movie_id => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${key}&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getMovieCast = async movie_id => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${key}&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\nexport const getMovieReviews = async movie_id => {\n  axios.defaults.baseURL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews?api_key=${key}&language=en-US`;\n  const response = await axios.get(`${axios.defaults.baseURL}`);\n  return response.data;\n};\n"],"names":["List","styled","totalPages","setCurrentPage","useState","prevPage","setPrevPage","numberOfPages","i","push","useEffect","style","border","sliceStartArray","sliceEndArray","sumArray","length","slice","concat","console","log","handlePageChange","e","target","Number","value","display","justifyContent","map","page","index","onClick","type","HomePage","currentPage","setTotalPages","movies","setMovies","getMovies","getTrending","results","total_pages","alert","films","id","original_title","backdrop_path","movie","margin","to","src","alt","width","key","axios","response","data","getSearch","query","getMovieDetails","movie_id","getMovieCast","getMovieReviews"],"sourceRoot":""}